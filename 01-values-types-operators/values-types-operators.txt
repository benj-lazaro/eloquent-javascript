Values, Types and Operators
---------------------------

Values
------
- Refers to chunks of data that represents pieces of information

- JavaScript Value Types
    - Number                = 123, 23.1
    - String                = "Hello World", 'This is a test', `1 + 1 = ${1 + 1}`
    - Boolean               = true, false
    - Undefined             = null, undefined

- Values are created by
    - Typing their name     = true, null
    - Typing their value    = 123, 32.2, "Hello"


Numbers
-------
- Refers to values that are of number type and numeric in nature
    - e.g. 11, 123, 2312312, 2.323

- JavaScript's Arithmetic Operators
    - Addition          +
    - Subtratction      -
    - Multiplication    *
    - Division          /
    - Modulo            %

- JavaScript follows the order of precedence (MDAS)
    - First, do all Multiplication then Division
    - Then, do all Addition then Subtratction
    - Override by enclosing an operation within a pair of ( )
    
- JavaScript has three (3) special numbers
    - They do NOT behave like normal numbers
    - They do NOT yielf a mathematical result

    - Positive Infinity     = Infinity
    - Negative Infinity     = -Infinity
    - Not A Number          = NaN


Strings
-------
- It refers to value that represents text
    - Values written by enclosing the content within a pair of quotes (single or double) or backticks
    - It is important that the starting quote or backtick matches the ending

- Backticks offers flexibility through the use of String Template Literals
    - Offer the ability to insert special characters without the need of an escape operator \
    - Allow to span multiple lines
    - Allows to embed values or arithmetic expression using ${ }
        - NOTE: Implicitly converts values into a string

- Arithmetic Operators can NOT work with strings EXCEPT for '+' operator
    - It concatenates two or more strings into a single string


Unary Operators
---------------
- Operators that require one (1) value and precedes the value
    - To negate numerically     = -
    - To negate logically       = !
    - To identify value type    = typeof()


Boolean
-------
- It refers to the value that distinguishes betweeon only two possibilities (true or false)

- JavaScript's Comparison Operators
    - Greater than              >
    - Less than                 <
    - Greater than or Equal to  >=
    - Less than or Equal to     <=
    - Equal                     ==
    - Not Equal                 !=
    - Strict equality           ===
    - Strict non-equality       !==

- When using Comparison Operators on string values
    - Strings in JavaScript are roughly alphabetic
        - Upperase letters are ALWAYS "less" than lowercase and non-alphabetic characters (e.g. !, -)
        
    - JavaScript goes over each characters from left to right
        - Comparing the Unicode values one by one

- JavaScript has ONLY one (1) value that is NOT equal to itself = NaN (Not a Number)
    - Due to being a result of a nonsensical computation

- JavaScript's Logical Operators
    - Logical AND   &&
    - Logical OR    ||
    - Logical NOT   !
        - NOTE: Logical NOT is a unary operator

- Logical Truth Table
    true  && true   = true
    true  && false  = false
    false && true   = false
    false && false  = false

    true || true    = true
    true || false   = true
    false || true   = true
    false || false  = false

    !true           = false
    !false          = true

- When mixing Boolean Operators with Arithmetic & Comparison Operators
    - || operator has the lowest precedence
    - Then comes && operator
    - Then the Comparison Operators
    - And the rest

- The Logical Operator that operates on three (3) values = Ternary Operator
    - The evaluated value on the left-hande side of the ? operator
    - Decides which of the two other values on the right-hand side of the ? operator
        - The two values are separated by by : operator
            - If it condition evalutes to 'true' the left-hand side value of the : is selected
            - Otherwise, the right-hand side value of the : is selected

    Syntax
    ------
    <conditional_statement> ? <first_choice> : <second_choice>;


Empty Values
------------
- JavaScript has two (2) values that denotes the absence of a meaningful value
    - These values carry NO information
        - null
        - undefined

    - There are NO difference in meaning between 'null' and 'undefined' 
        - Treat them interchangeably


Automatic Type Conversion
-------------------------
- When an operator is applied to the 'wrong' type of value
    - JavaScript will quietly convert that value to the type it needs = Type Coercion
    - Commonly occurs when comparing values using two-characters Comparison Operators (e.g. ==, !=)

- To prevent accidental conversion when comparing values
    - Use the operators === and !==
    - Compares the values and the type of the values

- Short-circuiting Logical Operators
    - Logical Operator || converts the left-hand side value to a Boolean type
        - If it evaluates to true, it returns the left-hand side value
        - Otherwise, it returns the right-hand side value

    - Logical Operator && converts the left-hand side value to a Boolean type
        - If it evalues to false, it returns the left-hand side value
        - Otherwise, it returns the right-hand side value

    - Logical Operators || and && evaluates the right-hand side value
        - ONLY when necessary

        - Using Logical ||, if the left-hand side value evaluates to true
            - The right-hand side value is NOT evaluated
        
        - Using Logical &&, if the left-ahdn side value evaluates to false
            -- The right-hand side value is NOT evaluated
